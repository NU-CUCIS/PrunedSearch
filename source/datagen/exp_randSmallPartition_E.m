% Copyright (C) 2016, Northwestern University
% See COPYRIGHT notice in top-level directory.
% random partition the sum of 1
% only generate small number of partitions assuming that
clear; clc; close all
%randsize = 200;

constraint = [0.0159822999947858,0.00818178632407973,0.00818178632407973,0.00818178632407973,0.00818178632407973,0.00818178632407973,0.00818178632407973,0.00613766636477021,0.00572645585112265,0.00572645585112265,0.00613766636477021,0.00572645585112265,0.00572645585112265,0.00572645585112265,0.00613766636477021,0.00572645585112265,0.00572645585112265,0.00572645585112265,0.00572645585112265,0.00572645585112265,0.00613766636477021,0.00572645585112265,0.00613766636477021,0.00572645585112265,0.00572645585112265,0.00572645585112265,0.00572645585112265,0.00572645585112265,0.00613766636477021,0.00613766636477021,0.00613766636477021,0.00376140480720866,0.00376140480720866,0.00376140480720866,0.00454084416782057,0.00454084416700527,0.00454084416700527,0.00454084416782057,0.00454084416782057,0.00454084416700527,0.00454084416782057,0.00454084416700527,0.00454084416700527,0.00454084416782057,0.00454084416700527,0.00454084416782057,0.00454084416782057,0.00454084416782057,0.00454084416782057,0.00454084416700527,0.00454084416700527,0.00454084416700527,0.00454084416700527,0.00454084416782057,0.00454084416700527,0.00454084416700527,0.00454084416782057,0.00454084416782057,0.00541192129558303,0.00495535011431222,0.00495535011431222,0.00541192129558303,0.00495535011431222,0.00541192129558303,0.00541192129558303,0.00541192129558303,0.00541192129558303,0.00541192129558303,0.00495535011431222,0.00541192129558303,0.00398197813454777,0.00398197813454777,0.00398197813454777,0.00398197813454777,0.00398197813454777,0.00398197813454777];

tic
% 1 partition - 76 outcomes
datap{1} = [];
for i = 1:76
    odf_1 = zeros(1,76);
    odf_1(i) = 1./constraint(i);
    datap{1} = [datap{1};odf_1,SeparateOptE(odf_1)];
end

% 2 partition - 76*75 = 5700 outcomes
% make both the partition point and the outcome random

for i = 2:75
    display(i)
    randsize = 100*i;
    datap{i} = randPartition(i,randsize,@SeparateOptE);
   
end
t = toc;

for i = 1:75
    bestopt(i) = min(datap{i}(:,77));
    meanopt(i) = mean(datap{i}(:,77));
    sdopt(i) = std(datap{i}(:,77));
end

%subplot(3,1,1)
%plot(bestopt,'*')
%subplot(3,1,2)
%plot(meanopt,'o')
%subplot(3,1,3)
%plot(sdopt,'+')

Data_SmallPartition = [];
for i = 1:25
    Data_SmallPartition = [Data_SmallPartition; datap{i}];
end


[s,ind] = sort(Data_SmallPartition(:,77));
dataSort = Data_SmallPartition(ind,:);

for i = 1:randsize
if dataSort(i,77) == s(i)
    continue
else
    disp('sorting not right!')
    break
end
end

dataOri_E_RkI = Data_SmallPartition;
dataSort(:,77) = s;
dataPolar_E_RkI = [dataSort(1:1250,:);...
    dataSort(end-1250+1:end,:)];
t_E_RkI = t;

dataPolar = dataPolar_E_RkI;
save('../data/data_randSmallPartition_E.mat','dataPolar','dataOri*','t_*','datap')
exit;







